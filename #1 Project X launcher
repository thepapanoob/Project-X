<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="blacklistzone.List();&#xD;&#xA;&#xD;&#xA;ProfileRestarter.StartProfileRestarter();&#xD;&#xA;&#xD;&#xA;SettingsWow.Settings();&#xD;&#xA;&#xD;&#xA;Intro.SmokieIntro();" />
    <QuestsSorted Action="Pulse" NameClass="AutoUpdate" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;=1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Tauren &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#2 Tauren(1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#2 Blood Elf (1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#2 Orc (1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Troll &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#2 Troll (1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Undead &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#2 Undead (1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 6 &amp;&amp; ObjectManager.Me.Level &lt; 10" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 6 &amp;&amp; ObjectManager.Me.Level &lt; 10" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#3 Blood Elf (6-10).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; (!wManager.Wow.Helpers.SpellManager.KnowSpell(6991)) &amp;&amp; (ObjectManager.Me.WowClass == WoWClass.Hunter)" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#3 Blood Elf Hunter.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 6 &amp;&amp; ObjectManager.Me.Level &lt; 10" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#3 Orc (6-10).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; (!wManager.Wow.Helpers.SpellManager.KnowSpell(1515)) &amp;&amp; (ObjectManager.Me.WowClass == WoWClass.Hunter)" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#3 Orc Hunter.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 10 &amp;&amp; ObjectManager.Me.Level &lt; 12" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; ObjectManager.Me.Level &lt; 12" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#4 Orc (10-12).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 12 &amp;&amp; ObjectManager.Me.Level &lt; 20" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; ObjectManager.Me.Level &lt; 15" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#4 Blood Elf (10-15).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 15 &amp;&amp; wManager.Wow.Helpers.Usefuls.MapZoneName == &quot;Ghostlands&quot;" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Blood Elf GhostlandsToUndercity.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#5 The Barrens (12-20).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; (!wManager.Wow.Helpers.SpellManager.KnowSpell(697)) &amp;&amp; (ObjectManager.Me.WowClass == WoWClass.Warlock)" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#6 Orc Warlock.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 20 &amp;&amp; ObjectManager.Me.Level &lt; 25" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#6 Stonetalon Mountains (20-25).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 25 &amp;&amp; ObjectManager.Me.Level &lt; 30" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#7 AshenAndThousand (25-30).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 30 &amp;&amp; ObjectManager.Me.Level &lt; 35" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#8 Desolace (30-35).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 35 &amp;&amp; ObjectManager.Me.Level &lt; 40" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#9 Dustwallow Marsh (35-40).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 40 &amp;&amp; ObjectManager.Me.Level &lt; 45" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#10 Feralas (40-45).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 45 &amp;&amp; ObjectManager.Me.Level &lt; 50" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#11 Tanaris (45-50).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 50 &amp;&amp; ObjectManager.Me.Level &lt; 57" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#12 UnGoro Crater (50-55).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 57 &amp;&amp; ObjectManager.Me.Level &lt; 60" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\#13 Sillithus (55-60).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
  </QuestsSorted>
  <NpcQuest />
  <Npc />
  <EasyQuests>
    <EasyQuest>
      <Name>Auto Update</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>public sealed class AutoUpdate : QuestClass
{
    public AutoUpdate() // Don't forget to use good classe name
    {
		Name = "AutoUpdate";
	
try
{
    string onlineFile = "https://raw.githubusercontent.com/TheSmokie/Project-X/master/%231%20Project%20X%20launcher";
    Quester.Bot.QuesterSetting.Load();
    string currentFile = System.Windows.Forms.Application.StartupPath + @"\Profiles\Quester\" + Quester.Bot.QuesterSetting.CurrentSetting.ProfileName;

    var currentFileContent = System.IO.File.ReadAllText(currentFile, System.Text.Encoding.UTF8);
    var onlineFileContent = new System.Net.WebClient { Encoding = System.Text.Encoding.UTF8 }.DownloadString(onlineFile);

    if (!string.IsNullOrWhiteSpace(currentFileContent) &amp;&amp; !string.IsNullOrWhiteSpace(onlineFileContent))
    {
        
            if (currentFileContent != onlineFileContent) // if new update
            {
                robotManager.Helpful.Logging.Write("[Auto Updater] New version found, try to update.", (Logging.LogType)1, Color.Red);
                System.IO.File.WriteAllText(currentFile, onlineFileContent,
                System.Text.Encoding.UTF8); // replace user file by online file 
				robotManager.Helpful.Logging.Write("[Auto Updater] New version Download Completed!", (Logging.LogType)1, Color.Red);
                new System.Threading.Thread(() =&gt; robotManager.Products.Products.ProductRestart()).Start(); // reload product (profile)
            }
            if (currentFileContent == onlineFileContent)
			{
                robotManager.Helpful.Logging.Write("[Auto Updater]The version on your pc is the latest updated version.", (Logging.LogType)1, Color.Red);
			}
    }
}
catch (System.Exception e)
{
    robotManager.Helpful.Logging.WriteError("Auto update: " + e);
}

        Lua.LuaDoString("DungeonFrameWorkLoaded = true");
    }
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return Lua.LuaDoString&lt;bool&gt;("return DungeonFrameWorkLoaded");</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Configuration;
using System.Net;
using System.Windows.Forms;
using robotManager.Products;
using System.Threading.Tasks;
using System.Drawing;

    public class ProfileRestarter
    {
        private static bool _IsAfk = false;
        private static Vector3 afkPosition = (Vector3)null;
        private static int timer = 0;
        private static bool _isSubscribed = false;
        private static void WatchForEvents()
        {
            if (!_isSubscribed)
            {
                _isSubscribed = true;

                EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
                {
                    if (id == wManager.Wow.Enums.LuaEventsId.CHAT_MSG_SYSTEM &amp;&amp; Conditions.ProductIsStartedNotInPause)
                    {

                        if (args.FirstOrDefault().Contains("You are now AFK"))
                        {
                            _IsAfk = true;
                            timer = 0;
                            afkPosition = ObjectManager.Me.Position;
                        }
                    }
                };
            }
        }

        public static void StartProfileRestarter()
        {

            Thread ProfileRestarterThread = new Thread(() =&gt;
            {
                Logging.Write("[Restarter]: Profile Restarter initialized");

                string profileName = "Project X\\Project X launcher.xml";
                string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;


                while ((wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) || !ObjectManager.Me.GetMove) &amp;&amp; Conditions.ProductIsStarted)
                {
                    Thread.Sleep(1000);
                }

                if (!_isSubscribed)
                {
                    Thread.Sleep(Usefuls.Latency + 500);
                    WatchForEvents();
                }

                while (Conditions.ProductIsStarted || Conditions.ProductInPause)
                {

                    if (wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                        break;

                    while (_IsAfk &amp;&amp; timer &lt; 600 &amp;&amp; !wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    {
                        Thread.Sleep(1000);
                        timer++;
                    }

                    if (_IsAfk &amp;&amp; timer &gt;= 600 &amp;&amp; ObjectManager.Me.Position.DistanceTo(afkPosition) &lt; 25)
                    {
                        Logging.Write("[Restarter]: Bot seems to have stopped / went AFK for too long. Restart of profile in process...");
                        wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName = profileName;
                        robotManager.Products.Products.ProductRestart();
                        break;
                    }

                    timer = 0;
                    _IsAfk = false;
                    Thread.Sleep(10000);
                }

                Logging.Write("[Restarter]: Profile Restarter disposed");

            });

            ProfileRestarterThread.Start();
        }
    }

    public class SettingsWow
    {
        public static void Settings()
        {
            Logging.Write("[Settings]: Started");
            wManager.wManagerSetting.CurrentSetting.Repair = true;
            Logging.Write("[Settings]: Repair = true");	
            wManager.wManagerSetting.CurrentSetting.SellGray = true;
            Logging.Write("[Settings]: SellGray = true");
            wManager.wManagerSetting.CurrentSetting.SellGreen = true;
            Logging.Write("[Settings]: SellGreen = true");
            wManager.wManagerSetting.CurrentSetting.Selling = true;
            Logging.Write("[Settings]: Selling = true");
            wManager.wManagerSetting.CurrentSetting.SellWhite = true;
            Logging.Write("[Settings]: SellWhite = true");
            wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 3;
            Logging.Write("[Settings]: MinFreeBagSlotsToGoToTown = 3");
            wManager.wManagerSetting.CurrentSetting.SearchRadius = 300;
            Logging.Write("[Settings]: CurrentSetting.SearchRadius = 300");
            wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 2;
            Logging.Write("[Settings]: MaxUnitsNear = 2");
            wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
            Logging.Write("[Settings]: NpcScanAuctioneer = false");
            wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
            Logging.Write("[Settings]: NpcScanMailboxes = false");
            wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
            Logging.Write("[Settings]: NpcScanRepair = false");
            wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;
            Logging.Write("[Settings]: NpcScanVendor = false");

            wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
            Logging.Write("[Settings]: HarvestHerbs = false");
            wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;
            Logging.Write("[Settings]: HarvestMinerals = false");

            wManager.wManagerSetting.CurrentSetting.DrinkPercent = 85;
            Logging.Write("[Settings]: DrinkPercent = 85");
            wManager.wManagerSetting.CurrentSetting.FoodPercent = 85;
            Logging.Write("[Settings]: FoodPercent = 85");
            wManager.wManagerSetting.CurrentSetting.TryToUseBestBagFoodDrink = true;
            Logging.Write("[Settings]: TryToUseBestBagFoodDrink = true");

            wManager.wManagerSetting.CurrentSetting.SmoothPath = true;
              Logging.Write("[Settings]: SmoothPath = true");

            wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 1000;
	Logging.Write("[Settings]: FlightMasterDiscoverRange = 1000");
            wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUseOnlyIfNear = true;
	Logging.Write("[Settings]: FlightMasterTaxiUseOnlyIfNear = true");
            wManager.wManagerSetting.CurrentSetting.SkinNinja = false;
	Logging.Write("[Settings]: SkinNinja = false");
            wManager.wManagerSetting.CurrentSetting.TryToAvoidEnemyGroupsRatio = 1;
	Logging.Write("[Settings]: TryToAvoidEnemyGroupsRatio = 1");
            wManager.wManagerSetting.CurrentSetting.FightInteractTargetMinDistance = 29;
	Logging.Write("[Settings]: FightInteractTargetMinDistance = 29");
            wManager.wManagerSetting.CurrentSetting.LootChests = true;
	Logging.Write("[Settings]: LootChests = true");
            wManager.wManagerSetting.CurrentSetting.LootInCombat = true;
	Logging.Write("[Settings]:LootInCombat = true");
            wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = true;
	Logging.Write("[Settings]:IgnoreCombatWithPet = true");

           if (wManager.wManagerSetting.CurrentSetting.GroundMountName == string.Empty)
            {
                wManager.wManagerSetting.CurrentSetting.UseGroundMount = false;
                wManager.wManagerSetting.CurrentSetting.Save();
                Logging.Write("[Settings]; UseGroundMount = False");
            }
            else
            if (wManager.wManagerSetting.CurrentSetting.GroundMountName != string.Empty)
            {
                wManager.wManagerSetting.CurrentSetting.UseGroundMount = true;
                wManager.wManagerSetting.CurrentSetting.Save();
                Logging.Write("[Settings]; UseGroundMount = True");
            }

            if (wManager.wManagerSetting.CurrentSetting.FlyingMountName == string.Empty)
            {
                wManager.wManagerSetting.CurrentSetting.UseFlyingMount = false;
                Logging.Write("[Settings]; UseFlyingMount = False");
            }
            else
            if (wManager.wManagerSetting.CurrentSetting.FlyingMountName != string.Empty)
            {
                wManager.wManagerSetting.CurrentSetting.UseFlyingMount = true;
                Logging.Write("[Settings]; UseFlyingMount = True");
            }

            wManager.wManagerSetting.CurrentSetting.Save();
            Logging.Write("Settings complete.");

        }
    }

public class blacklistzone
    {
        public static void List()
        {
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1733.73, -4426.244, 37.31858, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1748.4, -4416.781, 37.27323, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1668.088, -4391.733, 22.17756, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1666.025, -4365.162, 27.4433, "None"), 7.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1537.106, -4379.451, 16.90634, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1549.166, -4327.502, 20.44855, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1737.044, -4478.17, 32.06934, "None"), 4.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1888.123, -4452.734, 19.73206, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1856.235, -4422.517, 7.30606, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1856.235, -4422.517, 7.30606, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1890.279, -4417.67, 12.51004, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1940.485, -4693.287, 29.72934, "None"), 5.00f, true);
                wManager.wManagerSetting.AddBlackListZone(new Vector3(1872.12, -4522.215, 26.97758, "None"), 5.00f, true);
	wManager.wManagerSetting.AddBlackListZone(new Vector3(-628.2213f, -4465.777f, 46.50518f, "None"), 30.00f, true);
	Logging.Write("[Blacklist]: Blacklist Activated.");
                wManager.wManagerSetting.CurrentSetting.Save();  
        }
    }

public class Intro
    {
        public static void SmokieIntro()
        {
               Lua.LuaDoString(@"
			if not SmokieFrame then
            SmokieFrame = CreateFrame(""Frame"")
            SmokieFrame:ClearAllPoints()
            SmokieFrame:SetBackdrop(StaticPopup1:GetBackdrop())
            SmokieFrame:SetHeight(100)
            SmokieFrame:SetWidth(750)

            SmokieFrame.text = SmokieFrame:CreateFontString(nil, ""BACKGROUND"", ""GameFontNormal"")
            SmokieFrame.text:SetAllPoints()
            SmokieFrame.text:SetText(""Project X - Thank you for choosing project X. Please dont forget to show us your support by leaving a like on our post and leaving a review. For all bug reports, please join our discord :  https://discord.gg/xQuhs5C "")
            SmokieFrame.text:SetTextColor(1, 1, 1, 6)
            SmokieFrame:SetPoint(""CENTER"", 0, -200)
            SmokieFrame:SetBackdropBorderColor(0, 0, 0, 0)

            SmokieFrame:SetMovable(true)
            SmokieFrame:EnableMouse(true)
            SmokieFrame:SetScript(""OnMouseDown"",function() SmokieFrame:StartMoving() end)
            SmokieFrame:SetScript(""OnMouseUp"",function() SmokieFrame:StopMovingOrSizing() end)

            SmokieFrame.Close = CreateFrame(""BUTTON"", nil, SmokieFrame, ""UIPanelCloseButton"")
            SmokieFrame.Close:SetWidth(25)
            SmokieFrame.Close:SetHeight(25)
            SmokieFrame.Close:SetPoint(""TOPRIGHT"", SmokieFrame, -8, -8)
            SmokieFrame.Close:SetScript(""OnClick"", function()
                SmokieFrame:Hide()
                DEFAULT_CHAT_FRAME:AddMessage(""SmokieStatusFrame |cffC41F3Bclosed |cffFFFFFFWrite /DKSmokie to enable again."")  
            end)

            SLASH_WHATEVERYOURFRAMESARECALLED1=""/DKSmokie""
            SlashCmdList.WHATEVERYOURFRAMESARECALLED = function()
                if SmokieFrame:IsShown() then
                    SmokieFrame:Hide()
                else
                    SmokieFrame:Show()
                end
            end
        end");
        }
    }</Script>
  <OffMeshConnections />
  <BlacklistNpc />
  <BlacklistNpcType />
  <Blackspots />
</EasyQuestProfile>
